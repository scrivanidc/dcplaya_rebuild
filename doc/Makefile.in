# dcplaya  - developer auto documentation - Makefile
#
# (C) COPYRIGHT 2002 Ben(jamin) Gerard  <ben@sashipa.com>
#
# $Id$
#

## Tools
#
VERSION		:= @VERSION@
DOXYGEN 	:= @DOXYGEN@
AWK		:= @AWK@
LUA		:= @LUA@
LYNX		:= @LYNX@
DOC_TOOLS	:= @DOC_TOOLS@
LUA2DOX		:= $(AWK) -f ../utils/lua2dox.awk
TXT2ZML		:= $(LUA) -f ../utils/txt2zml.lua
DOXYGENERIC	:= ../utils/doxygeneric.sh
SHASUBST	:= ../utils/shasubst.sh
DATE		:= $(shell date +"%B %Y")

ALL_HEADERS_PATH :=\
 . \
 ../include \
 ../libs/draw \
 ../libs/translator \
 ../libs/translator/SHAsys \
 ../libs/translator/SHAtk \
 ../libs/translator/SHAR \
 ../libs/translator/SHAwrapper \
 ../libs/translator/SHAtranslator \
 ../libs/translator/SHAblitter

.SUFFIXES:

vpath
vpath %.h $(ALL_HEADERS_PATH)
vpath %.lua .. ../lua
vpath %.gif images

## Documentation source files
#

IMG_DOC_FILES	:= $(patsubst images/%, doc/html/%, $(wildcard images/*.gif))
PLG_SRC_FILES	:= $(shell find ../plugins/ -maxdepth 3 -type f -name '*.h')
USR_SRC_FILES	:= $(wildcard user_doc/*.h)
DOC_SRC_FILES	:= $(patsubst %.hin,%.h,$(wildcard *.hin))
HDR_SRC_FILES	:= $(foreach dir,$(ALL_HEADERS_PATH), $(wildcard *.h))
ifeq 'x$(AWK)' 'x'
LUA_ORG_FILES	:=
else
LUA_ORG_FILES	:= $(wildcard ../lua/*.lua) ../dcplayarc.lua ../userconf.lua
endif
LUA_SRC_FILES	:= $(LUA_ORG_FILES:../%=lua-doc/%)

HTML_EXTRA	:= dcplaya_doc.css dcplaya_header.html dcplaya_footer.html 

ALL_SRC_FILES	:=\
 $(PLG_SRC_FILES)\
 $(USR_SRC_FILES)\
 $(DOC_SRC_FILES)\
 $(HDR_SRC_FILES)\
 $(LUA_SRC_FILES)

ALL_DOC_FILES	:= $(ALL_SRC_FILES) $(IMG_DOC_FILES) $(HTML_EXTRA)


# Select targets that could be build with current configuration.
#
# if doxygen is not configured :
#  - all will generate an error message.
#  - distrib will do nothing.
# if lynx is not configured :
#  - both txt and zml project are removed. Only devdoc will be generated.
# if lua is not configured :
#  - zml project is removed.
# if awk is not configured :
#  - .lua files are removed from devdoc.
#
ALL_TARGETS	:= doxygen-is-missing
DISTRIB_TARGETS	:=
ifneq 'x$(DOXYGEN)' 'xecho'
ALL_TARGETS	:= all-doc
ifeq 'x$(LYNX)' 'xecho'
DISTRIB_TARGETS	:= devdoc-stamp
else
DISTRIB_TARGETS := all-doc
ifneq 'x$(LUA)' 'xecho'
DISTRIB_TARGETS += all-zml
endif
endif
endif

DOCINPUTS	:= $(ALL_SRC_FILES)

# style sheet configuration
###################################################
CSS	:=
CSS	+= -D "background=\#c4bdac"
CSS	+= -D "text=\#59564e"

CSS	+= -D "font-family=arial, tahoma, verdana, sans-serif"
CSS	+= -D "font-size=12pt"
CSS	+= -D "font-weight=normal"

CSS	+= -D "anchor-color=\#000000"
CSS	+= -D "hi-color=\#FFFFFF"

CSS	+= -D "barcolor=\#a0937b"
CSS	+= -D "barcolorlight=\#b7a88d"
CSS	+= -D "bartext=\#000000"
CSS	+= -D "barborder=1px solid"
CSS	+= -D "barbordercolor=\#000000"

CSS	+= -D "code-text=\#59564e"
CSS	+= -D "keyword=\#04708e"
CSS	+= -D "keywordtype=\#035066"
CSS	+= -D "keywordflow=\#704000"
CSS	+= -D "comment=\#A05020"
CSS	+= -D "preprocessor=\#404080"
CSS	+= -D "stringliteral=\#307030"
CSS	+= -D "charliteral=\#307030"

## project configuration.
#
PROJECT	:= -D DATE="$(DATE)"
PROJECT	+= -D PROJECT_NUMBER="$(VERSION)"
PROJECT	+= -D PROJECT_NAME="dcplaya"

## doxygene global configuration
#
DOXALL	:= $(PROJECT)
DOXALL	+= -D QUIET=YES
DOXALL	+= -D WARNINGS=YES
DOXALL	+= -D WARN_IF_UNDOCUMENTED=NO

DOXALL	+= -D FILE_PATTERNS='*.h *.lua'
DOXALL	+= -D IMAGE_PATH=images 

DOXALL	+= -D EXTRACT_ALL=NO
DOXALL	+= -D PRIVATE=NO
DOXALL	+= -D SOURCE_BROWSER=NO
DOXALL  += -D JAVADOC_AUTOBRIEF=YES
DOXALL  += -D DISTRIBUTE_GROUP_DOC=YES
DOXALL  += -D OPTIMIZE_OUTPUT_FOR_C=YES
DOXALL	+= -D TAB_SIZE=8

DOXALL	+= -D PREPROCESSING=YES
DOXALL	+= -D MACRO_EXPANSION=YES
DOXALL	+= -D SORT_MEMBER_DOCS=NO
DOXALL	+= -D RECURSIVE=NO
DOXALL	+= -D ALPHABETICAL_INDEX=NO
DOXALL	+= -D INTERNAL_DOCS=NO
DOXALL	+= -D DETAILS_AT_TOP=YES
DOXALL	+= -D DISABLE_INDEX=NO

## ZML generation
#

DOXZML	+= -D OUTPUT_DIRECTORY='zml-temp'
DOXZML	+= -D REPEAT_BRIEF=NO
DOXZML	+= -D GENERATE_TODOLIST=NO
DOXZML	+= -D GENERATE_TESTLIST=NO
DOXZML	+= -D GENERATE_BUGLIST=NO
DOXZML	+= -D GENERATE_DEPRECATEDLIST=NO
DOXZML	+= -D VERBATIM_HEADERS=NO
DOXZML	+= -D SHOW_INCLUDE_FILES=NO
DOXZML	+= -D REFERENCED_BY_RELATION=NO
DOXZML	+= -D REFERENCES_RELATION=NO
DOXZML	+= -D HTML_ALIGN_MEMBERS=NO
DOXZML	+= -D CLASS_DIAGRAMS=NO
DOXZML	+= -D CLASS_GRAPH=NO
DOXZML	+= -D COLLABORATION_GRAPH=NO
DOXZML	+= -D TEMPLATE_RELATIONS=NO
DOXZML	+= -D INCLUDE_GRAPH=NO
DOXZML	+= -D INCLUDED_BY_GRAPH=NO
DOXZML	+= -D GRAPHICAL_HIERARCHY=NO
DOXZML	+= -D GENERATE_XML=NO

## DEVELOPER documentation
#
DOXDEV	:=
DOXDEV	+= -D OUTPUT_DIRECTORY='doc'
DOXDEV	+= -D INPUT='$(DOCINPUTS)'
DOXDEV	+= -D PREDEFINED="DEBUG"
DOXDEV	+= -D INCLUDE_PATH="../include ../include/dcplaya"
DOXDEV	+= -D OPTIMIZE_OUTPUT_FOR_C=YES
DOXDEV	+= -D ENABLED_SECTIONS=""
DOXDEV	+= -D GENERATE_HTML=YES
DOXDEV	+= -D GENERATE_XML=YES
DOXDEV	+= -D HTML_HEADER=dcplaya_header.html
DOXDEV	+= -D HTML_FOOTER=dcplaya_footer.html
DOXDEV	+= -D HTML_STYLESHEET=dcplaya_doc.css
DOXDEV	+= -D HTML_OUTPUT=html
DOXDEV	+= -D GENERATE_TREEVIEW=NO
DOXDEV	+= -D GENERATE_MAN=NO
DOXDEV	+= -D MAN_EXTENSION=.1
DOXDEV	+= -D GENERATE_LATEX=NO

## Make rules
#

all: $(ALL_TARGETS)

distrib: $(DISTRIB_TARGETS)
	@mkdir -p doc
	@echo "Documentation distribution has been builded from [$^]"

.PHONY: lynx-is-missing lua-is-missing awk-is-missing doxygen-is-missing
lynx-is-missing lua-is-missing awk-is-missing doxygen-is-missing:
	@echo "You need to install $(patsubst %-is-missing,%,$@) for building this documentation."
	@test "1" = "2"

.PHONY: txt-transform
ifeq '$(LYNX)' 'echo'
# These targets need lynx to be configured.
txt-transform: lynx-is-missing
else

# This rules converts HTML files to txt using lynx. Some rules variables
# have to be properly set.
txt-transform-doc txt-transform-zml:
	@test -n "$(DST_DIR)" &&\
	test -n "$(SRC_DIR)" &&\
	mkdir -p "$(DST_DIR)" &&\
	for i in `find $(SRC_DIR) -type f -name '*.html'`; do\
		SRC="$$i"; DST="$(DST_DIR)/`basename $$i .html`.txt";\
		if test ! "$$SRC" -ot "$$DST"; then \
			echo "[$$DST]";\
			$(LYNX) -width=$(OUT_WIDTH) -dump "$$SRC"\
	 		> "$$DST" || break;\
		else test 0 -eq 0; fi;\
	done && echo "[$@]"
endif

all-doc: SRC_DIR=doc/html
all-doc: DST_DIR=doc/text
all-doc: OUT_WIDTH=64
all-doc: devdoc-stamp txt-transform-doc
	@echo "[$@]"

all-zml-txt: SRC_DIR=zml-temp/html
all-zml-txt: DST_DIR=zml-temp/text
all-zml-txt: OUT_WIDTH=4096
all-zml-txt: zmldoc-stamp txt-transform-zml
	@echo "[$@]"

all-zml: zml-transform

ifeq '$(LUA)' 'echo'
zml-transform: lua-is-missing
else

# This target does not required lynx because text files should
# have been processed before.
zml-transform: all-zml-txt
	@mkdir -p doc/zml && \
	for i in `find zml-temp/text -type f -name '*.txt'`; do\
		SRC="$$i"; DST="doc/zml/`basename $$i .txt`.zml";\
		if test ! "$$SRC" -ot "$$DST"; then \
			echo "[$$DST]";\
			cat zmlheader.zml > "$$DST" && \
			$(TXT2ZML) "$$SRC" >> "$$DST" || break;\
		else test 0 -eq 0; fi;\
	done && echo "[$@]"
endif

Makefile : Makefile.in
	(cd ..; ./config.status) 

lua-doc/userconf.lua : userconf-release.lua
	@echo "[$@] from [$<]"
	@mkdir -p $(dir $@)
	@$(LUA2DOX) $< > $@ 2> /dev/null

lua-doc/%.lua : %.lua
	@echo "[$@] [$<]"
	@mkdir -p $(dir $@)
	@$(LUA2DOX) $< > $@ 2> /dev/null

doc/html/%.gif : %.gif
	@echo "[$@]"
	@mkdir -p "$(@D)" && cp -f $< $@

%-stamp: %.dox
	@echo "[$@]"
	@rm -f $@ && $(DOXYGEN) $< && touch $@

devdoc.dox : devdoc.doxin Makefile $(ALL_DOC_FILES)
	@echo "make [$@] from [$<]"
	@$(DOXYGENERIC) $@ $(DOXALL) $(DOXDEV) < $< 

zmldoc.dox : devdoc.doxin Makefile $(ALL_DOC_FILES)
	@echo "make [$@] from [$<]"
	@$(DOXYGENERIC) $@ $(DOXALL) $(DOXDEV) $(DOXZML) < $< 

devdoc.doxin:
	@echo "make [$@]"
	@$(DOXYGEN) -s -g $@ > /dev/null

%.html : %.htmlin Makefile
	@$(SHASUBST) $(DOXALL) < $< > $@

%.css : %.cssin Makefile
	@echo "make [$@] from [$<]"
	@$(SHASUBST) $(CSS) < $< > $@

%.h : %.hin Makefile
	@echo "make [$@] from [$<]"
	@cat $< > $@

## Clean rules
#

clean_local:
	@rm -f *.dox* *.h *~ *.html *.css *.lua *-stamp

clean: clean_local
	@rm -rf doc lua-doc zml-temp

distclean: clean
	@rm -f Makefile *~

dep depend depend-clean:
