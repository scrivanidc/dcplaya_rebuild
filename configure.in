dnl# -*- sh -*-
dnl# the "configure" script is made from this by running GNU "autoconf"
dnl#
dnl# Configuration script for dcplaya
dnl#
dnl# by Benjamin Gerard <ben@sashipa.com>


AC_INIT(main.c)
AC_PROG_MAKE_SET

PACKAGE=dcplaya
VERSION="2.0"
VERSION_STAT="Beta 2"
DREAMMP3_URL="http://sashipa.ben.free.fr/dcplaya"
TOP_DIR="`pwd`"

AC_MSG_RESULT([])
AC_MSG_RESULT([***************************])
AC_MSG_RESULT([*                       ***])
AC_MSG_RESULT([** Configure $PACKAGE $VERSION **])
AC_MSG_RESULT([***                       *])
AC_MSG_RESULT([***************************])


# enable options
AC_ARG_ENABLE(malloc-debug,    [  --enable-malloc-debug          compile with malloc debug facilities [[default=no]]], MALLOC_DEBUG="yes", MALLOC_DEBUG="no")
AC_ARG_ENABLE(debug,    [  --enable-debug          compile with debug facilities [[default=no]]], DEBUG="yes", DEBUG="no")
AC_ARG_ENABLE(release,  [  --enable-release        compile for release version [[default=no]]], RELEASE="yes", RELEASE="no")
AC_ARG_ENABLE(master,   [  --enable-master         compile for master test emulation [[default=no]]], MASTER="yes", MASTER="no")

# with options
AC_ARG_WITH(sh-prefix,  [  --with-sh-prefix        Specify sh tools prefix [[default=sh-elf-]]],  SH_PREFIX="$with_sh_prefix", SH_PREFIX="sh-elf-")
AC_ARG_WITH(arm-prefix, [  --with-arm-prefix       Specify arm tools prefix [[default=arm-elf-]]],  ARM_PREFIX="$with_arm_prefix", ARM_PREFIX="arm-elf-")
AC_ARG_WITH(sh-path,    [  --with-sh-path          Specify sh tools path [[default=]]],  SH_PATH="$with_sh_path", SH_PATH="")
AC_ARG_WITH(arm-path,   [  --with-arm-path         Specify arm tools path [[default=]]],  ARM_PATH="$with_arm_path", ARM_PATH="")
AC_ARG_WITH(kos,        [  --with-kos              Specify kos [[default=../kos]]], KOS_BASE="$with_kos", KOS_BASE="../kos")

# Setup SH and ARM tools path.
if test "x$SH_PATH" = "x"; then
    SH_PATH="$PATH"
else
    SH_PATH="$SH_PATH:$PATH"
fi

if test "x$ARM_PATH" = "x"; then
    ARM_PATH="$PATH"
else
    ARM_PATH="$ARM_PATH:$PATH"
fi

# Display a warning message if target specific prefix nor specific path
# have been given. host tools will probably be use instead.
if test "x" = "x$SH_PREFIX" -a "x" = "x$SH_PATH"; then
    AC_MSG_RESULT([WARNING: You do *NOT* have specified sh-prefix nor sh-path.])
fi
if test "x" = "x$ARM_PREFIX" -a "x" = "x$ARM_PATH"; then
    AC_MSG_RESULT([WARNING: You do *NOT* have specified arm-prefix nor arm-path.])
fi

# Configure include/config.h
[
PACKAGE_STR="\"$PACKAGE\""
VERSION_STR="\"${VERSION}${VERSION_STAT}\""
VERSION_MAJOR=`expr "$VERSION" : '\([0-9]*\).*' \| 1`
VERSION_MINOR=`expr "$VERSION" : '[0-9]*\.\([0-9]*\)' \| 0`
VERSION_NUM=0x`printf "%d%02d" $VERSION_MAJOR $VERSION_MINOR`
BREAKPOINT="if (1) {*(int *)1 = (N);} else  "
DREAMMP3_URL_STR="\"$DREAMMP3_URL\""
]

test "x$MALLOC_DEBUG" != "xyes"
MALLOC_DEBUG=$?
test "x$DEBUG" != "xyes"
DEBUG=$?
test "x$RELEASE" != "xyes"
RELEASE=$?
test "x$MASTER" != "xyes"
MASTER=$?

DCPLAYA_TOPDIR="\"${TOP_DIR}\""

AC_SUBST(DREAMMP3URL)
AC_SUBST(TOP_DIR)
AC_SUBST(PACKAGE)
AC_SUBST(PACKAGE_STR)
AC_SUBST(VERSION)
AC_SUBST(VERSION_STAT)
AC_SUBST(VERSION_STR)
AC_SUBST(VERSION_NUM)
AC_SUBST(BREAKPOINT)
AC_SUBST(DREAMMP3_URL_STR)
AC_SUBST(DEBUG)
AC_SUBST(RELEASE)
AC_SUBST(MASTER)
AC_SUBST(DCPLAYA_TOPDIR)

########################################################################

AC_MSG_RESULT([])
AC_MSG_RESULT([**************************])
AC_MSG_RESULT([*                      ***])
AC_MSG_RESULT([** Configure HOST tools **])
AC_MSG_RESULT([***                      *])
AC_MSG_RESULT([**************************])

DEL="rm -f"
AC_PROG_MAKE_SET
AC_PROG_CC
HOST_CC="$CC"
HOST_CFLAGS="$CFLAGS"
AC_PATH_PROG(PPMTOXPM,ppmtoxpm,echo,[$PATH])

AC_SUBST(MAKE)
AC_SUBST(HOST_CC)
AC_SUBST(HOST_CFLAGS)
AC_SUBST(DEL)
AC_SUBST(PPMTOXPM)

########################################################################

AC_MSG_RESULT([])
AC_MSG_RESULT([***********************************])
AC_MSG_RESULT([*                               ***])
AC_MSG_RESULT([** Configure documentation tools **])
AC_MSG_RESULT([***                               *])
AC_MSG_RESULT([***********************************])

AC_PROG_AWK()
AC_PATH_PROG(LYNX,lynx,echo,[$PATH])
AC_PATH_PROG(DOXYGEN, doxygen, echo, [$PATH])
AC_PATH_PROG(LUA, lua, echo, [$PATH])
if test "x$LUA" != "xecho"; then
    LUA_VERSION="`$LUA -v`"
    if test "x`expr "$LUA_VERSION" : 'Lua 4'`" != "x5"; then
	AC_MSG_RESULT([WARNING: LUA version may be not supported.])
    fi
fi

DOC_TOOLS="no"
DOC_DIR=""
if test "x$DOXYGEN" = "xecho"; then
    AC_MSG_RESULT([WARNING: You need to install doxygen to build dcplaya documentation.])
elif test "x$AWK" = "x"; then
    AC_MSG_RESULT([WARNING: You need to install awk to build dcplaya documentation.])
else
    DOC_TOOLS="yes"
    DOC_DIR=doc
    
    if test "x$LYNX" == "xecho" || test "x$LUA" == "xecho"; then
	AC_MSG_RESULT([WARNING: Some prerequired tools for building dcplaya documentation are missing. This is not critical, but you will not be able to build the documentation if you intend to burn a dcplaya distrib CD.])
    DOC_TOOLS="incomplet"
    fi
fi

AC_SUBST(AWK)
AC_SUBST(DOXYGEN)
AC_SUBST(LUA)
AC_SUBST(LYNX)
AC_SUBST(DOC_DIR)

########################################################################

AC_MSG_RESULT([])
AC_MSG_RESULT([*************************])
AC_MSG_RESULT([*                     ***])
AC_MSG_RESULT([** Configure CDR tools **])
AC_MSG_RESULT([***                     *])
AC_MSG_RESULT([*************************])

AC_PATH_PROG(CDRECORD,cdrecord,echo,[$PATH])
AC_PATH_PROG(MKISOFS, mkisofs, echo, [$PATH])
AC_PATH_PROG(MAKEIP, makeip, echo, [$PATH])
AC_PATH_PROG(SCRAMBLE, scramble, echo [$PATH])
AC_PATH_PROG(DD, dd, echo [$PATH])

CDR_TOOLS="yes"
if test "x$CDRECORD" = "xecho" || test "x$MKISOFS" = "xecho" ||
    test "x$SCRAMBLE" = "xecho" || test "x$DD" = "xdd";
    then
    CDR_TOOLS="no"
    AC_MSG_RESULT([WARNING: Some prerequired tools for building dcplaya CD are missing. You will not be able to burn a dcplaya distrib CD.])
fi

AC_SUBST(CDRECORD)
AC_SUBST(MKISOFS)
AC_SUBST(MAKEIP)
AC_SUBST(SCRAMBLE)
AC_SUBST(CDR_TOOLS)

########################################################################

AC_MSG_RESULT([])
AC_MSG_RESULT([*******************************])
AC_MSG_RESULT([*                           ***])
AC_MSG_RESULT([** Configure DREAMCAST tools **])
AC_MSG_RESULT([***                           *])
AC_MSG_RESULT([*******************************])


AC_MSG_RESULT([])
AC_MSG_RESULT([** Configure general tools **])
AC_MSG_RESULT([])

test "x" = "x$DCTOOL" && DCTOOL="dc-tool"
test "x" = "x$DCTOOL_FLAGS" && DCTOOL_FLAGS="-x"
AC_PATH_PROG(KOS_LOADER, ${DCTOOL}, echo, [$PATH])
if test "x$KOS_LOADER" != "xecho"; then
    KOS_LOADER_FLAGS="$DCTOOL_FLAGS"
else
    KOS_LOADER_FLAGS=""
fi

AC_SUBST(KOS_LOADER)
AC_SUBST(KOS_LOADER_FLAGS)

AC_MSG_RESULT([])
AC_MSG_RESULT([** Configure SH tools **])
AC_MSG_RESULT([])

SH_CFLAGS="-Wall -O4 -Wno-multichar"
if test $DEBUG -ne 0; then
    SH_CFLAGS="$SH_CFLAGS -g"
fi
if test $MALLOC_DEBUG -ne 0; then
    SH_CFLAGS="$SH_CFLAGS -DMALLOC_DEBUG"
fi
SH_CFLAGS="$SH_CFLAGS -ml -m4-single-only"
SH_CFLAGS="$SH_CFLAGS -fno-builtin -fno-strict-aliasing -fomit-frame-pointer"
SH_CFLAGS="$SH_CFLAGS -DDCPLAYA"
SH_CFLAGS="$SH_CFLAGS -ffast-math" # VP : added this
SH_CXXFLAGS="$SH_CFLAGS -fno-operator-names -fno-rtti -fno-exceptions"
SH_ASFLAGS="-little"
SH_ARFLAGS="cr"
SH_LDFLAGS="-ml -m4-single-only -nostartfiles -nostdlib -static -Wl,-Ttext=0x8c010000"

AC_PATH_PROG(SH_CC,      ${SH_PREFIX}gcc,      no, [$SH_PATH])
AC_PATH_PROG(SH_CXX,     ${SH_PREFIX}g++,      no, [$SH_PATH])
AC_PATH_PROG(SH_AS,      ${SH_PREFIX}as,       no, [$SH_PATH])
AC_PATH_PROG(SH_AR,      ${SH_PREFIX}ar,       no, [$SH_PATH])
AC_PATH_PROG(SH_RANLIB,  ${SH_PREFIX}ranlib,   no, [$SH_PATH])
AC_PATH_PROG(SH_OBJCOPY, ${SH_PREFIX}objcopy,  no, [$SH_PATH])
AC_PATH_PROG(SH_OBJDUMP, ${SH_PREFIX}objdump,  no, [$SH_PATH])
AC_PATH_PROG(SH_LD,      ${SH_PREFIX}ld,       no, [$SH_PATH])
AC_PATH_PROG(SH_NM,      ${SH_PREFIX}nm,       no, [$SH_PATH])
AC_PATH_PROG(SH_STRIP,   ${SH_PREFIX}strip,    no, [$SH_PATH])

CC="$SH_CC"
CFLAGS="$SH_CFLAGS -I."
CXX="$SH_CXX"
CXXFLAGS="$SH_CXXFLAGS -I."
AS="$SH_AS"
ASFLAGS="$SH_ASFLAGS"
AR="$SH_AR"
ARFLAGS="$SH_ARFLAGS"
RANLIB="$SH_RANLIB"
LD="$SH_LD"
LDFLAGS="$SH_LDFLAGS"
OBJCOPY="$SH_OBJCOPY"

AC_SUBST(SH_AS)
AC_SUBST(SH_CC)
AC_SUBST(SH_CXX)
AC_SUBST(SH_LD)
AC_SUBST(SH_AR)
AC_SUBST(SH_RANLIB)
AC_SUBST(SH_OBJCOPY)
AC_SUBST(SH_OBJDUMP)
AC_SUBST(SH_STRIP)
AC_SUBST(SH_CFLAGS)
AC_SUBST(SH_CXXFLAGS)
AC_SUBST(SH_ASFLAGS)
AC_SUBST(SH_ARFLAGS)
AC_SUBST(SH_LDFLAGS)

AC_MSG_RESULT([])
AC_MSG_RESULT([** Configure ARM tools **])
AC_MSG_RESULT([])

ARM_CFLAGS="-mcpu=arm7 -Wall -O2"
ARM_AFLAGS="-marm7"

AC_PATH_PROG(ARM_CC,      ${ARM_PREFIX}gcc,     no, [$ARM_PATH])
AC_PATH_PROG(ARM_CXX,     ${ARM_PREFIX}g++,     no, [$ARM_PATH])
AC_PATH_PROG(ARM_AS,      ${ARM_PREFIX}as,      no, [$ARM_PATH])
AC_PATH_PROG(ARM_AR,      ${ARM_PREFIX}ar,      no, [$ARM_PATH])
AC_PATH_PROG(ARM_RANLIB,  ${ARM_PREFIX}ranlib,  no, [$ARM_PATH])
AC_PATH_PROG(ARM_OBJCOPY, ${ARM_PREFIX}objcopy, no, [$ARM_PATH])
AC_PATH_PROG(ARM_LD,      ${ARM_PREFIX}ld,      no, [$ARM_PATH])
AC_PATH_PROG(ARM_NM,      ${ARM_PREFIX}nm,      no, [$ARM_PATH])

AC_SUBST(ARM_AS)
AC_SUBST(ARM_CC)
AC_SUBST(ARM_CXX)
AC_SUBST(ARM_AR)
AC_SUBST(ARM_RANLIB)
AC_SUBST(ARM_OBJCOPY)
AC_SUBST(ARM_LD)
AC_SUBST(ARM_CFLAGS)
AC_SUBST(ARM_CXXFLAGS)
AC_SUBST(ARM_ASFLAGS)
AC_SUBST(ARM_ARFLAGS)
AC_SUBST(ARM_LDFLAGS)

# Finally test required tools for both SH and ARM architecture.

REQUIRED_SH_TOOLS="$SH_AS $SH_CC $SH_LD $SH_AR $SH_RANLIB $SH_NM $SH_OBJCOPY $SH_OBJDUMP $SH_STRIP"

REQUIRED_ARM_TOOLS="$ARM_CC $ARM_AS $ARM_AR $ARM_RANLIB $ARM_LD $ARM_NM $ARM_OBJCOPY"

REQUIRED_DC_TOOLS="$REQUIRED_SH_TOOLS $REQUIRED_ARM_TOOLS"

for i in $REQUIRED_DC_TOOLS; do
    if test "x$i" = "xno"; then
        AC_MSG_ERROR([Tool missing in action! Use --with-sh-path, --with-arm-path or set PATH.])
    fi
done


########################################################################

AC_MSG_RESULT([])
AC_MSG_RESULT([***************************])
AC_MSG_RESULT([*                       ***])
AC_MSG_RESULT([** Configure KallistiOS  **])
AC_MSG_RESULT([***                       *])
AC_MSG_RESULT([***************************])

KOS_ARCH="dreamcast"

if test "x`expr substr "$KOS_BASE" 1 1`" != "x/"; then
	KOS_BASE="$TOP_DIR/$KOS_BASE"
fi

if test ! -d "$KOS_BASE" ; then
    AC_MSG_ERROR([KallistiOS (KOS) [$KOS_BASE] not found. Use --with-kos.])
else
    AC_MSG_RESULT([checking for KalistiOS... $KOS_BASE])
fi
# $$$ben : Fix me 
#SH_LDFLAGS="$SH_LDFLAGS -L$KOS_BASE"

AC_PATH_PROG(KOS_GENROMFS, genromfs, no, $KOS_BASE/utils/genromfs:$PATH)
AC_PATH_PROG(KOS_BIN2O,    bin2o,    no, $KOS_BASE/utils/bin2o)

if test "x$KOS_GENROMFS" = "xno"; then
    AC_MSG_ERROR([Could not find kos gemromfs program.])
fi

if test "x$KOS_BIN2O" = "xno"; then
    AC_MSG_ERROR([Could not find kos bin2o program.])
fi

AC_SUBST(KOS_ARCH)
AC_SUBST(KOS_BASE)
AC_SUBST(KOS_GENROMFS)
AC_SUBST(KOS_BIN2O)

########################################################################

AC_MSG_RESULT([])
AC_MSG_RESULT([**************************])
AC_MSG_RESULT([*                      ***])
AC_MSG_RESULT([** Process config files **])
AC_MSG_RESULT([***                      *])
AC_MSG_RESULT([**************************])

AC_OUTPUT(
 [Makefile.inc]
 [arm/Makefile]
 [doc/Makefile]
 [make-cd/Makefile]
 [VERSION]
 [include/dcplaya/config.h:config.h.in])

########################################################################

if test $DEBUG   -eq 0; then DEBUG=no;   else DEBUG=yes; fi
if test $RELEASE -eq 0; then RELEASE=no; else RELEASE=yes; fi
if test $MASTER  -eq 0; then MASTER=no;  else MASTER=yes; fi

AC_MSG_RESULT([])
AC_MSG_RESULT([***************************])
AC_MSG_RESULT([*                       ***])
AC_MSG_RESULT([** Configuration summary **])
AC_MSG_RESULT([***                       *])
AC_MSG_RESULT([***************************])
AC_MSG_RESULT([ top dir             : $DCPLAYA_TOPDIR])
AC_MSG_RESULT([ master-test         : $MASTER])
AC_MSG_RESULT([ malloc-debug-mode   : $MALLOC_DEBUG])
AC_MSG_RESULT([ debug-mode          : $DEBUG])
AC_MSG_RESULT([ release-mode        : $RELEASE])
AC_MSG_RESULT([ sh (core) prefix    : $SH_PREFIX])
AC_MSG_RESULT([ arm (audio) prefix  : $ARM_PREFIX])
AC_MSG_RESULT([ kos                 : $KOS_BASE])
AC_MSG_RESULT([ dc-tool             : $KOS_LOADER ($KOS_LOADER_FLAGS)])
AC_MSG_RESULT([ host C compiler     : $HOST_CC ($HOST_CFLAGS)])
AC_MSG_RESULT([ Documentation tools : $DOC_TOOLS])
AC_MSG_RESULT([ CDR tools           : $CDR_TOOLS])
AC_MSG_RESULT([])

dnl#
dnl# End of "$Id$".
dnl#
